#!/usr/bin/env python3
import time
import roslib
import rospy
import actionlib
from functions import *
from control_msgs.msg import *
from trajectory_msgs.msg import *
from geometry_msgs.msg import PoseStamped
from trajectory_msgs.msg import JointTrajectoryPoint


x_offset = 1.0
y_offset = 0.0
z_offset = 0.3
global x_block, y_block, z_block
x_block = 0
y_block = 0
z_block = 0


def callback(msg): # Tipo callback
    global x_block, y_block, z_block
    x_block = msg.pose.position.y
    y_block = msg.pose.position.x
    z_block = msg.pose.position.z


if __name__ == '__main__':
    
    rospy.init_node("pick_n_place", disable_signals=True)

    print("Waiting for Arm server...")
    robot_client = actionlib.SimpleActionClient('/kr20/kr20_joint_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
    robot_client.wait_for_server()
    print("Connected to Arm server")
    
    print("Waiting for Gripper server...")
    gripper_client = actionlib.SimpleActionClient('/kr20/gripper_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
    gripper_client.wait_for_server()
    print("Connected to Gripper server")    
    
    visp_sub = rospy.Subscriber('/visp_auto_tracker/object_position', PoseStamped, callback)

    # Initial position
    a = FollowJointTrajectoryGoal()
    a.trajectory = JointTrajectory()
    arm_joint_names = ['base__link01', 'link01__link02', 'link02__link03', 'link03__link04', 'link04__link05', 'link05__gripper']
    q_act = [0.0, -0.42, -0.32, 0, -1.65, 0]
    T = fkine_kr20(q_act)
    x_act = TF2xyzquat(T)
    print("Initial end effector position: "+str(np.round(x_act[0:3],3)))
    a.trajectory.joint_names = arm_joint_names
    a.trajectory.points = [JointTrajectoryPoint(positions=q_act,velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    
    robot_client.send_goal(a)
    robot_client.wait_for_result()
    rospy.sleep(2)    

    
    # Open gripper
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    grip_joint_names = ['gripper__gripper_left', 'gripper__gripper_right']
    grip_q = [-0.09, 0.09]
    g.trajectory.joint_names = grip_joint_names
    g.trajectory.points = [JointTrajectoryPoint(positions=grip_q,velocities=[0]*2,time_from_start=rospy.Duration(1.0))]
    
    gripper_client.send_goal(g)
    gripper_client.wait_for_result()
    rospy.sleep(1)
    
    
    # Above the Block position
    x_des = np.copy(x_act[0:3])
    x_des[0] = x_block + x_offset
    x_des[1] = -y_block + y_offset
    x_des[2] = x_act[2]
    print("Offset: "+str(y_block))
    print("Block position: "+str(np.round(x_des[0:3],3)))
    q_des = ikine_kr20(x_des[0:3], q_act) 
    
    interp_len = 10
    points = np.zeros((interp_len,3))
    points[:,0] = np.linspace(x_act[0], x_block + x_offset, interp_len)
    points[:,1] = np.linspace(x_act[1], -y_block + y_offset, interp_len)
    points[:,2] = np.linspace(x_act[2], x_act[2], interp_len)
            
    a = FollowJointTrajectoryGoal()
    a.trajectory = JointTrajectory()
    a.trajectory.joint_names = arm_joint_names
    
    for i in range(interp_len-1):
      if(i==0):
        q_des = ikine_kr20(points[0,:], q_act)
      else:
        q_des = ikine_kr20(points[i+1,:], q_des)
      jtp = JointTrajectoryPoint()
      jtp.positions = q_des
      jtp.velocities = [0]*6
      jtp.time_from_start = rospy.Duration(0.1)
      a.trajectory.points.append(jtp)
    
    robot_client.send_goal(a)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    
    # Pick the Block position
    x_des[2] = x_act[2] - z_block + z_offset
    print("Pick end effector position: "+str(np.round(x_des[0:3],3)))
    q_des = ikine_kr20(x_des[0:3], q_des) 
    
    a = FollowJointTrajectoryGoal()
    a.trajectory = JointTrajectory()
    a.trajectory.joint_names = arm_joint_names
    a.trajectory.points = [JointTrajectoryPoint(positions=q_des,velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    
    robot_client.send_goal(a)
    robot_client.wait_for_result()
    rospy.sleep(2)
    
    
    # Grip gripper
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    grip_q = [-0.07, 0.07]
    g.trajectory.joint_names = grip_joint_names
    g.trajectory.points = [ JointTrajectoryPoint(positions=grip_q,velocities=[0]*2,time_from_start=rospy.Duration(0.8))]
    
    gripper_client.send_goal(g)
    gripper_client.wait_for_result()
    rospy.sleep(1)
    
    
    # Raise the Block position
    x_des[2] = 1.5
    print("Raise Block position: "+str(np.round(x_des[0:3],3)))
    q_des = ikine_kr20(x_des[0:3], q_des) 
    
    a = FollowJointTrajectoryGoal()
    a.trajectory = JointTrajectory()
    a.trajectory.joint_names = arm_joint_names
    a.trajectory.points = [JointTrajectoryPoint(positions=q_des,velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    
    robot_client.send_goal(a)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    
    # Move to the other Table
    q_des[0] = q_des[0] + 1.5708
    T = fkine_kr20(q_des)
    x_act = TF2xyzquat(T)
    print("Other Table position: "+str(np.round(x_act[0:3],3)))
    
    a = FollowJointTrajectoryGoal()
    a.trajectory = JointTrajectory()
    a.trajectory.joint_names = arm_joint_names
    a.trajectory.points = [JointTrajectoryPoint(positions=q_des,velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    
    robot_client.send_goal(a)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    
    # Leave Block to the other Table
    x_des = x_act
    x_des[0] = 0.0
    x_des[1] = 0.85
    x_des[2] = x_des[2] - 0.2
    q_des = ikine_kr20(x_des[0:3], q_des)
    print("Leave Block position: "+str(np.round(x_des[0:3],3)))
    
    a = FollowJointTrajectoryGoal()
    a.trajectory = JointTrajectory()
    a.trajectory.joint_names = arm_joint_names
    a.trajectory.points = [JointTrajectoryPoint(positions=q_des,velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    
    robot_client.send_goal(a)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    
    # Open gripper
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    grip_q = [-0.09, 0.09]
    g.trajectory.joint_names = grip_joint_names
    g.trajectory.points = [ JointTrajectoryPoint(positions=grip_q,velocities=[0]*2,time_from_start=rospy.Duration(1.0))]
    
    gripper_client.send_goal(g)
    gripper_client.wait_for_result()
    rospy.sleep(1)
    
    
    # Leave the Table
    x_des[2] = 1.5
    q_des = ikine_kr20(x_des[0:3], q_des)
    print("Leave Table position: "+str(np.round(x_des[0:3],3)))
    
    a = FollowJointTrajectoryGoal()
    a.trajectory = JointTrajectory()
    a.trajectory.joint_names = arm_joint_names
    a.trajectory.points = [JointTrajectoryPoint(positions=q_des,velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    
    robot_client.send_goal(a)
    robot_client.wait_for_result()
    rospy.sleep(2)
    
    
    # Final position
    arm_q = [0.0, -0.42, -0.32, 0, -1.65, 0]
    print("Back to the Initial position")
    
    a = FollowJointTrajectoryGoal()
    a.trajectory = JointTrajectory()
    a.trajectory.joint_names = arm_joint_names
    a.trajectory.points = [ JointTrajectoryPoint(positions=arm_q,velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    
    robot_client.send_goal(a)
    robot_client.wait_for_result()
    rospy.sleep(3)   
    
    
    gripper_client.cancel_goal()
    robot_client.cancel_goal()
